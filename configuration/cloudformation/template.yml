AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Resources:

  PlaygroundApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref Stage
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2017-11-24T23:10:24Z"
        host: "xdvadl6jbl.execute-api.us-west-2.amazonaws.com"
        basePath: "/DummyStage"
        schemes:
        - "https"
        paths:
          /echo:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "Name"
                in: "query"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: "{\n#set($queryMap = $input.params().querystring)\n\n\
                    #foreach( $key in $queryMap.keySet())\n  \"$key\" : \"$queryMap.get($key)\"\
                    \n  #if($foreach.hasNext),#end\n#end,\n    \"ResourcePath\" : \"$context.resourcePath\"\
                    \n}"
                uri:
                  Fn::Sub:
                    - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
                    - LambdaArn:
                        Fn::GetAtt:
                        - LambdaFunction
                        - Arn
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
                credentials: !GetAtt
                  - ApigwExecutionRole
                  - Arn

  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri:
        Bucket: !Ref CodeBucket
        Key: !Ref CodeKey
      Handler: !Ref HandlerPath
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: java8
      Events:
        APIG:
          Type: Api
          Properties:
            Method: POST
            Path: /
            RestApiId: !Ref PlaygroundApi
      Timeout: 30
      MemorySize: 384

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  ApigwExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: "ApigwInvokeLambda"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:Invoke*'
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - apigateway.amazonaws.com

Parameters:
  ApiName:
    Type: String
  CodeBucket:
    Type: String
  CodeKey:
    Type: String
  HandlerPath:
    Type: String
  Stage:
    Type: String
